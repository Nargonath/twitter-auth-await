{"version":3,"sources":["../lib/index.js"],"names":["requestTokenUrl","Symbol","authenticateUrl","accessTokenUrl","getRequestToken","requestTokenSecret","TwitterOAuth","constructor","consumerKey","consumerSecret","callback","oauthClient","getRedirectAuthURI","requestToken","Promise","resolve","reject","getOAuthRequestToken","error","oauthRequestToken","oAuthRequestTokenSecret","results","Error","oauth_callback_confirmed","getAccessToken","oAuthToken","oAuthTokenVerifier","getOAuthAccessToken","oauthAccessToken","oauthAccessTokenSecret","accessToken","accessTokenSecret","userId","user_id","screenName","screen_name","xAuthExpires","x_auth_expires"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA,MAAMA,kBAAkBC,OAAO,iBAAP,CAAxB;AACA,MAAMC,kBAAkBD,OAAO,iBAAP,CAAxB;AACA,MAAME,iBAAiBF,OAAO,gBAAP,CAAvB;AACA,MAAMG,kBAAkBH,OAAO,iBAAP,CAAxB;AACA,MAAMI,qBAAqBJ,OAAO,oBAAP,CAA3B;;AAEO,MAAMK,YAAN,CAAmB;AAMxBC,cAAY;AACVC,kBAAc,aAAO,aADX;AAEVC,qBAAiB,aAAO,gBAFd;AAGVC,eAAW;AAHD,GAAZ,EAIG;AAAA;AAAA;AAAA;AAAA;AAAA,aATiB;AASjB;AAAA;AAAA;AAAA;AAAA;AAAA,aARiB;AAQjB;AAAA;AAAA;AAAA;AAAA;AAAA,aAPgB;AAOhB;AAAA;AAAA;AAAA;AAAA;AAAA,aANoB;AAMpB;AACD,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKE,WAAL,GAAmB,iBACjB,KAAKX,eAAL,CADiB,EAEjB,KAAKG,cAAL,CAFiB,EAGjB,KAAKK,WAHY,EAIjB,KAAKC,cAJY,EAKjB,MALiB,EAMjBC,QANiB,EAOjB,WAPiB,CAAnB;AASD;;AAED,QAAME,kBAAN,GAA2B;AACzB,UAAMC,eAAe,MAAM,KAAKT,eAAL,GAA3B;AAEA,WAAQ,GAAE,KAAKF,eAAL,CAAsB,gBAAeW,YAAa,EAA5D;AACD;;AAED,GAACT,eAAD,IAAoB;AAClB,WAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKL,WAAL,CAAiBM,oBAAjB,CACE,CAACC,KAAD,EAAQC,iBAAR,EAA2BC,uBAA3B,EAAoDC,OAApD,KAAgE;AAC9D,YAAIH,KAAJ,EAAW;AACT,iBAAOF,OAAO,IAAIM,KAAJ,CAAUJ,KAAV,CAAP,CAAP;AACD;;AAED,YAAI,CAACG,QAAQE,wBAAb,EAAuC;AACrC,iBAAOP,OAAO,IAAIM,KAAJ,CAAW,8BAAX,CAAP,CAAP;AACD;;AAED,aAAKjB,kBAAL,IAA2Be,uBAA3B;AACA,eAAOL,QAAQI,iBAAR,CAAP;AACD,OAZH;AAcD,KAfM,CAAP;AAgBD;;AAEDK,iBAAeC,aAAa,aAAO,YAAnC,EAAgDC,qBAAqB,aAAO,oBAA5E,EAAiG;AAC/F,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKL,WAAL,CAAiBgB,mBAAjB,CACEF,UADF,EAEE,KAAKpB,kBAAL,CAFF,EAGEqB,kBAHF,EAIE,CAACR,KAAD,EAAQU,gBAAR,EAA0BC,sBAA1B,EAAkDR,OAAlD,KAA8D;AAC5D,YAAIH,KAAJ,EAAW;AACT,iBAAOF,OAAOE,KAAP,CAAP;AACD;;AAED,eAAOH,QAAQ;AACbe,uBAAaF,gBADA;AAEbG,6BAAmBF,sBAFN;AAGbG,kBAAQX,QAAQY,OAHH;AAIbC,sBAAYb,QAAQc,WAJP;AAKbC,wBAAcf,QAAQgB;AALT,SAAR,CAAP;AAOD,OAhBH;AAkBD,KAnBM,CAAP;AAoBD;;AAtEuB;;QAAb/B,Y,GAAAA,Y;uBACVN,e;uBACAE,e;sBACAC,c;0BACAE,kB","file":"index.js","sourcesContent":["import { OAuth } from 'oauth';\n\nimport { ensure } from './utils';\n\nconst requestTokenUrl = Symbol('requestTokenUrl');\nconst authenticateUrl = Symbol('authenticateUrl');\nconst accessTokenUrl = Symbol('accessTokenUrl');\nconst getRequestToken = Symbol('getRequestToken');\nconst requestTokenSecret = Symbol('requestTokenSecret');\n\nexport class TwitterOAuth {\n  [requestTokenUrl] = 'https://api.twitter.com/oauth/request_token';\n  [authenticateUrl] = 'https://api.twitter.com/oauth/authenticate';\n  [accessTokenUrl] = 'https://api.twitter.com/oauth/access_token';\n  [requestTokenSecret] = null;\n\n  constructor({\n    consumerKey = ensure`consumerKey`,\n    consumerSecret = ensure`consumerSecret`,\n    callback = null,\n  }) {\n    this.consumerKey = consumerKey;\n    this.consumerSecret = consumerSecret;\n    this.oauthClient = new OAuth(\n      this[requestTokenUrl],\n      this[accessTokenUrl],\n      this.consumerKey,\n      this.consumerSecret,\n      '1.0A',\n      callback,\n      'HMAC-SHA1',\n    );\n  }\n\n  async getRedirectAuthURI() {\n    const requestToken = await this[getRequestToken]();\n\n    return `${this[authenticateUrl]}?oauth_token=${requestToken}`;\n  }\n\n  [getRequestToken]() {\n    return new Promise((resolve, reject) => {\n      this.oauthClient.getOAuthRequestToken(\n        (error, oauthRequestToken, oAuthRequestTokenSecret, results) => {\n          if (error) {\n            return reject(new Error(error));\n          }\n\n          if (!results.oauth_callback_confirmed) {\n            return reject(new Error(`OAuth callback not confirmed`));\n          }\n\n          this[requestTokenSecret] = oAuthRequestTokenSecret;\n          return resolve(oauthRequestToken);\n        },\n      );\n    });\n  }\n\n  getAccessToken(oAuthToken = ensure`oAuthToken`, oAuthTokenVerifier = ensure`oAuthTokenVerifier`) {\n    return new Promise((resolve, reject) => {\n      this.oauthClient.getOAuthAccessToken(\n        oAuthToken,\n        this[requestTokenSecret],\n        oAuthTokenVerifier,\n        (error, oauthAccessToken, oauthAccessTokenSecret, results) => {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve({\n            accessToken: oauthAccessToken,\n            accessTokenSecret: oauthAccessTokenSecret,\n            userId: results.user_id,\n            screenName: results.screen_name,\n            xAuthExpires: results.x_auth_expires,\n          });\n        },\n      );\n    });\n  }\n}\n"]}